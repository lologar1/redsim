Welcome to the official Redsim (RSM) documentation!
Words in <carets> are usually program variables or important functions.

Chunkutils
	A very important utility file that hosts all chunk-related functionalities, such as chunk loading
	meshing, GPU memory handling (mesh culling) and maintenance of the <chunkmap> and <meshmap>.

	<chunkmap>
		A usf_hashmap which links a "chunk index" to a <Chunkdata *>. Chunk indexes are 64-bit
		unsigned integers representing a 3D position, where the first bit is irrelevant and
		subsequent lenghts of 21 bits represent the x, y and z position respectively.

		Modified by:
			<client_init()>
				Initialized on program startup.
			<remeshChunk()>
				Remeshing a non-existing chunk initializes it to air.

	<meshmap>
		A usf_hashmap which links a "chunk index" (see above) to a "mesh".
		A mesh is a pointer to four <GLuint>, the two first being the opaque and transparent VAOs for a
		given chunk. The two last are the number of indices in each VAO to be rendered.

		Modified by:
			<client_init()>
				Initialized on program startup.
			<remeshChunk()>
				Remeshing a chunk without a mesh initializes it before setting its data.

	<blockmeshes>
		A pointer to <Blockmesh>. Holds an appropriate <Blockmesh> template for each block ID.
		(Initialized by renderutils)

	<Blockmesh>
		Stores all the information for opaque and transparent vertices and indices for a given block ID.

	<Blockdata>
		Stores all the information for a block existing in the world ; i.e. it is instantiated.

	<Chunkdata>
		Holds all <Blockdata> for a given chunk.

	<remeshChunk()>
		Takes a "chunk index" (see above) and updates the <chunkmap> and <meshmap> accordingly with the
		re-meshed chunk. Also updates <meshes> and <nmesh> indirectly because the pointers are the same.

	<generateMeshlist()>
		Clears and recalculates <meshes> and <nmesh> with all chunks that should be rendered around the player.

	<updateMeshlist()>
		Updates <meshes> and <nmesh> with the new player position.
								
		Attention: currently updateMeshlist() does not (but maybe in the future) cull any meshes which go
		unused. If GPU memory is a problem, this may need to be implemented.
								
		CPU-side chunks are always conserved, as they are needed to run simulations even outside the player's
		view.

Client
	Handles user input and bridges between the renderer (always locally ran) and the meshes that it should
	display.

	<meshes> and <nmesh>
		Variables passed to the renderer which contain all meshes to be rendered.

		<meshes> is a pointer to a pointer of four elements, which are the same as in meshmap but
		adjusted for the chunks to display at this time.

		<nmesh> is simply the number of meshes to display.

Renderutils
	Handles shader utilities for the renderer as well as mesh loading and texture atlas creation.
